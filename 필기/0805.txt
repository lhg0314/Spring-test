
트랜젝션 속성

ex) @Transactional(readOnly=true,isolation=Isolation.DEFAILT,rollvackFor=Exception.class)
1.propagation : 이미 진행중인 트랜잭션이 존재할때
		새로운 쿼리가 호출될경우 ,어떻게 처리할지를 설정
	ex)@Transactional(propagation=Propagation.REQUIRED)

	-REQUIRED : 진행중인 트랜젹션이 있다면 새로우 쿼리가 트랜잭션에 포함됨
		진행중인 트랜잭션이 없으면 새로운 트랜잭션을생성
		기본값.

	-REQUIRED_NEW : 항상 새로운 트랜잭션을 시작
	-SUPPORT : 이미 시작된 트랜잭션이 있으면 트랜잭션에 포함
		없으면 트랜잭션 없이 진행

	-NOT_SURPPORTED : 트랜잭션을 사용하지않는다
	-MANDATORY : 시작된 트랜잭션이 있으면 참여한다
		시작된 트랜잭션이 없으면 예외 발생

	-NEVER: 트랜잭션을 사용하지 않는다
		먼저 시작된 트랜잭션이 있으면 예외발생


2. isolation : 트랜잭션 격리 수준을 관리
	여러트랜잭션이 진행될때 트랜잭션의 작업 결과를 어떻게 노출할 것인지 결정하는 기준

	ex)@Transaction(propagation=Propagation.REQUIRED,isolation=Isolation.DEFAULT)
	-DEFAULT :DB설정을 따라간다
	-READ_COMMIT:Commit처리를 하지 않은 정보를 읽는 것을 방지 가장 많이 사용하는 격리수준,기본값
	-READ_UNCOMMITED: COMMIT처리를 하지 않은 정보를 읽을 수있음
	-REPEATABLE_READ :하나의 트랜잭션에서 읽고있는 ROW를 다른 트랜잭션에서 변경하는 것을 막아준다
	-SERIALIZABLE: 트랜잭션을 순차적으로 진행 시킨다, 가장 강력한 트랜잭션 격리수준,속도가 느리다

3.readOnly=true : readOnly가 지정된 트랜잭션에서는 읽기만 가능
4.rollbackFor=Exception.class : 해당예외가 발생했을때 rollback 처리
5.noRollBackFor=Exception.class: 해당예외가 발행했을때 rollback처리하지 않음