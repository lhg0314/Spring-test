 Spring Annotation
	-어노테이션은 자바 1.5버전 부터 지원
	-스프링은 어노테이션을 이용하여 bean과 관련된 정보를 설정할 수 있다.

 Spring에서 어노테이션을 사용하기 위해 필요한 설정
	1.의존성 관련 어노테이션
	<context:annotation=config/> 태그를 applicationContext.xml에 등록

	@Autowired, @Required, @Resource 등등

	-Autowired : Spring에서 의존관계를 자동으로 설정할 때 사용
		     생성자(매개변수),메서드(매개변수),필드변수에 적용이 가능하다
		     해당타입의 bean객체가 applicationContext에 존재하지 않거나
		     2개 이상이면 예외가 발생

		    @Qualifier 을 사용하여 2개 이상의 bean중에서 특정 bean을 사용하도록 지정할수 있다.
 			->아이디로 지정이 가능하다.

	-Resource : 어플리케이션에서 필요로하는 의존성 주입을 해준다.
		@Resource(name="testDao")
		빈 객체의 이름을 지정해서 의존성을 주입한다

	-Required : 필수 프로퍼티임을 명시(반드시 bean의 생성과정에서 호출되어야하는 Setter메서드)
		setter메서드 위에 적용
		필수 프로퍼티를 설정하지 않으면 bean이 생성되지 않음

	2.bean으로 등록하는 것과 관련된 어노테이션
	<context:component-scan base-package=''/>
	context:annotation-config +
	@Component,@Controller,@Service, @Repository 등

	component : 클래스위에 선언하며,해당 클래스를 자동으로 bean으로 등록한다.
	bean의 이름은 해당 클래스명이 사용된다. 첫글자는 소문자

	Controller : spring Mvc에서 컨트롤러 인식되게 해주는 어노테이션 클래스위에 Controller 어노테이션을 지정해야
	RequestMapping,RequestParam 등을 지정할수 있다

	Service: Component와 동일 , 가독성을 위해서 만약 해당 클래스가 Service역할을 한다면
	Service어노테이션을 사용하는 것을 권장

	Repository : dao 역할을 하는 클래스에 적용이 된다
	발생한느 SqlException(checked Exception)을 DataAccessException(unchecked Exception)으로 바꿔준다

	3.<mvc : annotation-driven/>
		Spring MVC와 관련된 annotaion을 등록 해준다
		@RequestMapping, @Valid등등을 자동으로 처리


 +AOP(Aspect Oriented Programing) ,관점지향 프로그래밍
	시스템의 규모와 복잡도가 증가하면서 
	기능별로 모듈화를 거치더라도 중복되는 코드가 생겨나게 된다

	ex) 트랜잭션관리,로깅처리 
	이러한 코드들을 다시 한번 더 모듈화 해내어 분리하는것이 AOP이다
	즉 재모듈화 이다

 +AOP용어

 1.Advice
	advice는 PointCut 에서 지정한 JoinPoint에서 실행되어야하는 코드
	Around Advice : Joinpoint 앞과뒤에서실행
	Before Advice: Joinpoint 앞에서실행
	After Returning Advice : Joinpoint 메소드호출이정상적으로종료된후에실행
	After Throwing Advice : 예외가발생했을때실행

 2.JoinPoint
	advice를 적용할수 있는 지점
	-spring에서는 method실행 전 ,혹은 실행 후에 advice를 적용할 수 있다

 3.PointCut
	JoinPoint의 부분집합으로 실제로 우리가 Advice를 적용한 JoinPoint
	스프링에서는 AspectJ 문법을 활용해서 PointCut을 정의할수 있다

 4.Weaving
	Advice를 로직코드에 적용하는것

 5.Advisor
	Advice + pointCut : 언제 무엇을 할지 정의하는것

 6.Target
	핵심로직을 구현하는 클래스

 7.Proxy
	대상 객체에 Advice가 적용된 후 생성된 객체




	
	































